加载内核
    1. 内核由bootloader启动后, 传递赢家参数给内核, 内核设置相应的全局变量
    2. 内存分布和初始化
    3. 创建0进程, 0进程的信息在代码中定死
    4. 0去fork1进程, 1进程负责初始化各个模块(控制台, 进程, 内存...)
    5. 挂在文件系统
    6. 可以进入后台相应, 系统调用/信号/netlink/内存进程管理/协议栈/驱动


内核启动代码:
    1. bootsect.s: 将所有的程序从磁盘放入内存, 执行到中间部分跳转setup.s
    2. setup.s: 传递的参数解析并设置到全局变量, 然后跳转head.s 
    3. head.s: 是内核的头部
        GDT的设置, A20总线检查

main:
    1. 内存拷贝
    2. 内存初始化
    3. 异常函数初始化, 将异常号和异常处理函数绑定
    4. 设备初始化
    5. 控制台, 定时器初始化
    6. 进程调度初始化
    7. 其他初始化
    8. 从内核态移动到用户状态
        内核态不可抢占, 用户态可抢占
    

进程控制块task_struct:
    1. 时间片: counter = counter >> 1 + priority
    2. 进程LDT, 包含程序的数据段和代码段的指针
    3. TSS: 处理器的保存的当前状态, 寄存器

    1. 先调时间片较大运转, counter = counter >> 1 + priority
    2. 优先级越大, 越先运行
    3. signal描述了进程目前拥有的信号集合
    4. sigaction[32]描述了每个信号的详细信息, 执行函数等
    5. blocked 已经被屏蔽的信号集合
    6. exit_code
    7. 描述内存空间start_code, end_code, end_data
        栈start_stack, 中断栈brk
    8. jiffies, 每10ms累加一次
    # 文件系统相关
    filp[]指针数组, 通过fd找到filp对应的指针




进程调度初始化:
    1. 设置tss和ldt, 
    2. 遍历64个进程, 清空没个任务指针
    3. 汇编设置寄存器: 设置系统定时器中断, 设置系统中断
    

01进程创建:
    Linux 在初始化中进行0进程的创建(fork), 0是所有进程的父进程
    01进程(init()):
        打开标准012句柄, 创建1进程
        1进程打开/etc/rc文件, 执行shell, 然后退出
        0进程等待1进程退出, 然后进行两层while1
        后面的两个while1的作用是担心上面的fork失败, 进行更换环境变量, 再次尝试
    0进程不会退出, 在没有进程运行的时候0进程运行, pause


fork:
    1. 在task链表中找空位存放
        fork(C)调用sys_fork(汇编)
        sys_fork调用先调用find_empty_process(C)
        之后进行通用寄存器入栈
    2. 创建一个task_struct实例, copy
        sys_fork之后调用copy_process(C)
        copy_process中分配空间
        *p=*current, 先全部拷贝
    3. 设置task_struct实例
        在copy_process中拷贝后进行个性化设置
        先设置不可中断状态, 个性化设置完成设置为传入参数等
        设置协处理器
        拷贝代码段和数据段的内存
        文件计数+1, 集成父进程的文件打开
        同时继承pwd, root, executeable
        最后设置程序的LDT TSS
        然后设置位RUNNING

TSS: task status segment


schedule:
    1. 轮训所有的进程, 是否有警告并且警告超时
    